# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_showdoc.ipynb.

#nbdev_cell auto 0
__all__ = ['NbdevLookup']


#nbdev_cell ../nbs/03_showdoc.ipynb 1
#export
from .imports import *
from .read import *
from .export import *
from .doclinks import *
from fastcore.utils import *

import pkg_resources

if IN_NOTEBOOK:
    from IPython.display import Markdown,display
    from IPython.core import page
else: Markdown,display,page = None,None,None


#nbdev_cell ../nbs/03_showdoc.ipynb 4
#export
class NbdevLookup:
    def __init__(self, d, strip_all=None, strip_mods=None, strip_local=True):
        settings = d['settings']
        if strip_mods is None: strip_mods = settings.get('strip_mods','').split()
        if strip_all  is None: strip_all  = str2bool(settings.get('strip_all',False))
        strip_mods = L(strip_mods)
        if strip_local: strip_mods = (strip_mods+d['mods'].keys())
        py_syms = merge(*d['syms'].values())
        if strip_all:
            stripped = {remove_prefix(k,f"{k_}."):v for k_,v_ in d['syms'].items() for k,v in v_.items()}
            py_syms = merge(stripped, py_syms)
        for m in strip_mods:
            stripped = {remove_prefix(k,f"{m}."):v for k,v in d['syms'][m].items()}
            py_syms = merge(stripped, py_syms)
        self.syms = merge(py_syms, d['mods'])

    def __call__(self, s):
        "URL for documentation for symbol `s`"
        return self.syms.get(s, None)


