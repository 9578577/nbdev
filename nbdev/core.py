#AUTOGENERATED! DO NOT EDIT! File to edit: dev/00_core.ipynb (unless otherwise specified).

__all__ = ['save_config_file', 'Config', 'in_ipython', 'IN_IPYTHON', 'in_colab', 'IN_COLAB', 'in_notebook',
           'IN_NOTEBOOK', 'last_index', 'compose', 'DocsTestClass']

#Cell
from .imports import *

#Cell
def save_config_file(file, config):
    with file.open('w') as f: yaml.dump(config, f, default_flow_style=False)

#Cell
class Config:
    "Store the basic information for nbdev to work"
    def __init__(self):
        cfg_path = Path.cwd()
        while cfg_path != Path('/') and not (cfg_path/'config.yml').exists(): cfg_path = cfg_path.parent
        self.config_file = cfg_path/'config.yml'
        assert self.config_file.exists(), "Use `Config.create` to create a `Config` object the first time"
        self.d = self.load_config()

    def __getattr__(self,k):
        if k=='d': raise AttributeError
        if k not in self.d: raise AttributeError
        return self.config_file.parent/self[k] if k.endswith('path') else self[k]

    def __getitem__(self,k):   return self.d[k]
    def __setitem__(self,k,v): self.d[k] = str(v)
    def __contains__(self,k):  return k in self.d

    def load_config(self):
        with open(self.config_file, 'r') as f:
            config = yaml.safe_load(f)
            return config

    @classmethod
    def create(cls, lib_name, git_url, path='.', nb_folder='nbs', lib_folder=None, doc_folder='docs'):
        path = Path(path)
        if lib_folder is None: lib_folder = lib_name
        config = {'lib_name':  lib_name,
                  'git_url': git_url,
                  'lib_path': lib_folder,
                  'nbs_path': nb_folder,
                  'doc_path': doc_folder}
        save_config_file(path/'config.yml', config)
        return cls()

    def save(self): save_config_file(self.config_file,self.d)

#Cell
def in_ipython():
    "Check if the code is running in the ipython environment (jupyter including)"
    program_name = os.path.basename(os.getenv('_', ''))
    if ('jupyter-notebook' in program_name or # jupyter-notebook
        'ipython'          in program_name or # ipython
        'JPY_PARENT_PID'   in os.environ):    # ipython-notebook
        return True
    else:
        return False

IN_IPYTHON = in_ipython()

#Cell
def in_colab():
    "Check if the code is running in Google Colaboratory"
    try:
        from google import colab
        return True
    except: return False

IN_COLAB = in_colab()

#Cell
def in_notebook():
    "Check if the code is running in a jupyter notebook"
    if in_colab(): return True
    try:
        shell = get_ipython().__class__.__name__
        if shell == 'ZMQInteractiveShell': return True   # Jupyter notebook, Spyder or qtconsole
        elif shell == 'TerminalInteractiveShell': return False  # Terminal running IPython
        else: return False  # Other type (?)
    except NameError: return False      # Probably standard Python interpreter

IN_NOTEBOOK = in_notebook()

#Cell
def last_index(x, o):
    "Finds the last index of occurence of `x` in `o` (returns -1 if no occurence)"
    res = len(o)-1
    while res >= 0 and o[res]!=x: res-=1
    return res

#Cell
def compose(*funcs, order=None):
    "Create a function that composes all functions in `funcs`, passing along remaining `*args` and `**kwargs` to all"
    if len(funcs)==0: return noop
    if len(funcs)==1: return funcs[0]
    def _inner(x, *args, **kwargs):
        for f in funcs: x = f(x, *args, **kwargs)
        return x
    return _inner

#Cell
class DocsTestClass:
    def test(): pass