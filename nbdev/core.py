#AUTOGENERATED! DO NOT EDIT! File to edit: dev/00_core.ipynb (unless otherwise specified).

__all__ = ['save_config_file', 'Config', 'in_ipython', 'IN_IPYTHON', 'in_colab', 'IN_COLAB', 'in_notebook',
           'IN_NOTEBOOK', 'DocsTestClass']

#Cell
from local.imports import *

#Cell
def save_config_file(file, config):
    with file.open('w') as f: yaml.dump(config, f, default_flow_style=False)

#Cell
class Config:
    config_file = Path.cwd()/'config.yml'

    def __init__(self):
        assert self.config_file.exists(), "Use `Config.create` to create a `Config` object the first time"
        self.d = self.load_config()

    def __getattr__(self,k):
        if k=='d': raise AttributeError
        if k not in self.d: raise AttributeError
        return self[k]

    def __getitem__(self,k):   return self.d[k]
    def __setitem__(self,k,v): self.d[k] = str(v)
    def __contains__(self,k):  return k in self.d

    def load_config(self):
        with open(self.config_file, 'r') as f:
            config = yaml.safe_load(f)
            return config

    @classmethod
    def create(cls, lib_name, git_url):
        config = {'lib_name':  lib_name,
                  'git_url': git_url}
        save_config_file(Config.config_file, config)
        return cls()

    def save(self): save_config_file(self.config_file,self.d)

#Cell
def in_ipython():
    "Check if the code is running in the ipython environment (jupyter including)"
    program_name = os.path.basename(os.getenv('_', ''))
    if ('jupyter-notebook' in program_name or # jupyter-notebook
        'ipython'          in program_name or # ipython
        'JPY_PARENT_PID'   in os.environ):    # ipython-notebook
        return True
    else:
        return False

IN_IPYTHON = in_ipython()

#Cell
def in_colab():
    "Check if the code is running in Google Colaboratory"
    try:
        from google import colab
        return True
    except: return False

IN_COLAB = in_colab()

#Cell
def in_notebook():
    "Check if the code is running in a jupyter notebook"
    if in_colab(): return True
    try:
        shell = get_ipython().__class__.__name__
        if shell == 'ZMQInteractiveShell': return True   # Jupyter notebook, Spyder or qtconsole
        elif shell == 'TerminalInteractiveShell': return False  # Terminal running IPython
        else: return False  # Other type (?)
    except NameError: return False      # Probably standard Python interpreter

IN_NOTEBOOK = in_notebook()

#Cell
class DocsTestClass:
    def test(): pass