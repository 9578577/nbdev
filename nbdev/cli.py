# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/09_cli.ipynb.

#nbdev_cell auto 0
__all__ = ['nbdev_diff_nbs', 'nbdev_trust_nbs']


#nbdev_cell ../nbs/09_cli.ipynb 1
#export
from .read import *
from .export import *

from .imports import *
from fastcore.script import *

from nbformat.sign import NotebookNotary
import tempfile


#nbdev_cell ../nbs/09_cli.ipynb 4
#export
import subprocess
from shutil import copytree,ignore_patterns


#nbdev_cell ../nbs/09_cli.ipynb 5
#export
@call_parse
def nbdev_diff_nbs():
    "Prints the diff between an export of the library in notebooks and the actual modules"
    lib_folder = Config().path('lib_path')
    with tempfile.TemporaryDirectory() as d1, tempfile.TemporaryDirectory() as d2:
        d1,d2 = Path(d1),Path(d2)
        path = Config().path('lib_path')
        ignore=ignore_patterns("__pycache__")
        shutil.copytree(path, d1, dirs_exist_ok=True, ignore=ignore)
        nbdev_build_lib()
        shutil.copytree(path, d2, dirs_exist_ok=True, ignore=ignore)
        shutil.rmtree(path)
        shutil.copytree(d1, str(path))
        print(run('diff', '-ru', d1, d2, ignore_ex=True)[1])


#nbdev_cell ../nbs/09_cli.ipynb 8
#export
@call_parse
def nbdev_trust_nbs(fname:Param("A notebook name or glob to convert", str)=None,
                    force_all:Param("Trust even notebooks that haven't changed", bool)=False):
    "Trust noteboks matching `fname`"
    check_fname = Config().path('nbs_path')/".last_trusted"
    last_checked = os.path.getmtime(check_fname) if check_fname.exists() else None
    files = Config().path('nbs_path').glob('**/*.ipynb') if fname is None else glob.glob(fname)
    for fn in files:
        if force_all or not last_checked or os.path.getmtime(fn)>last_checked:
            nb = read_nb(fn)
            if not NotebookNotary().check_signature(nb): NotebookNotary().sign(nb)
    check_fname.touch(exist_ok=True)


